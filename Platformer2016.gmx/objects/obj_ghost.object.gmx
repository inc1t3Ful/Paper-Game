<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ghost</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialise Variables
dir = -1;
movespeed = 2;
grav = 0.2;
hsp = 0;
vsp = 0;

fearofheights = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Set horizontal and vertical speed

hsp = dir * movespeed; // 3 * (1) or (-1)
vsp += grav; 

// Horizontal collision

if(place_meeting(x + hsp, y, obj_block))
{   
    // while one pixel in the direction about to move when not hitting a wall, move one pixel in that 
    // direction until one pixel to right or left is that wall.
    while(!place_meeting(x + sign(hsp), y, obj_block))
    {
        x += sign(hsp);       
    }
    hsp = 0;
    
    // if hit a wall, change direction
    dir *= -1;
}

x += hsp;

// Vertical collision

if(place_meeting(x, y + vsp, obj_block))
{   
    // same logic as above. Changed variables
    while(!place_meeting(x, y + sign(vsp), obj_block))
    {
        y += sign(vsp);
    }
    vsp = 0;
    
    // check if flag is on 
    // check if the pixel at the edge of sprite in direction it is moving (X Coordinate)
    // check an arbitrary number of pixels below feet to allow walking down slopes/small pixel edges (Y Coordinate) 
    if (fearofheights) &amp;&amp; !position_meeting(x+(sprite_width/2)*dir, y+(sprite_height/2)+100, obj_block)
    {
        // change direction
        dir *= -1;
    }       
}

y += vsp;

// Enemy Collision (aka with player)

if(place_meeting(x, y, obj_scottStill))
{
    // checks top collision
    if(obj_scottStill.y &lt; y - 85)
    {
        with(obj_scottStill) vsp = -jumpspeed;
        instance_destroy();
    }
    // Current collision code works better on obj_scottStill
    /*
    // check left/right collision
    else
    {
        room_goto(rm_initialise);
    }
    */
    else
    {
        scr_death();
    }
}  

// Animate

// Changes direction of character (mirror) based on movement input
// scales horizontally the image by 100% or -100% based on left / right input
if(dir != 0) image_xscale = -dir;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
