<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_scottStill</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialise variables
grav = 0.8;
hsp = 0;
vsp = 0;
jumpspeed = 20;
movespeed = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_jump = keyboard_check_pressed(vk_space);

// React to player input

move = key_left + key_right; // will either be -1 or 1 depending on key input. WIll be 0 if both
hsp = move * movespeed; // horizontal movespeed will be either -x or x, or 0

// Gravity contraint
if(vsp &lt; 30) vsp += grav;

if(place_meeting(x, y+1, obj_block))
{
    vsp = key_jump * -jumpspeed
}

// Horizontal collision

if(place_meeting(x + hsp, y, obj_block))
{   
    // while one pixel in the direction about to move when not hitting a wall, move one pixel in that 
    // direction until one pixel to right or left is that wall.
    while(!place_meeting(x + sign(hsp), y, obj_block))
    {
        x += sign(hsp);       
    }
    hsp = 0;
}

x += hsp;

// Vertical collision

if(place_meeting(x, y + vsp, obj_block))
{   
    // same logic as above. Changed variables
    while(!place_meeting(x, y + sign(vsp), obj_block))
    {
        y += sign(vsp);
    }
    vsp = 0;
}

y += vsp;


// Animate

// Changes direction of character (mirror) based on movement input
if(move != 0) image_xscale = move;
/*
if(place_meeting(x, y+1, obj_block))
{
    if(move != 0) sprite_index = spr_scottRun; else sprite_index = spr_scottStill;
}
*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
